{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a9a99aea-e43a-45ae-8069-2c2640af7e65",
   "metadata": {},
   "outputs": [],
   "source": [
    "!python criar_bd.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c2b43865-2819-4cb0-b839-a1b817866f41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E-mails n√£o lidos encontrados: 2\n",
      "\n",
      "üìß Novo e-mail de: mirellamelonegri@gmail.com\n",
      "üìå Assunto: forma de pagamento\n",
      "üìú Corpo do e-mail: quais formas de pagamento voc√™s aceitam?\n",
      "\n",
      "üîç Procurando palavras: ['quais', 'formas', 'de', 'pagamento', 'voc√™s', 'aceitam?']\n",
      "üì¶ Resposta encontrada para 'pagamento': Aceitamos cart√µes de cr√©dito, boleto e Pix.\n",
      "üîç Resposta encontrada: Aceitamos cart√µes de cr√©dito, boleto e Pix.\n",
      "‚úÖ E-mail enviado para mirellamelonegri@gmail.com\n",
      "‚úÖ Resposta enviada com sucesso!\n",
      "\n",
      "üìß Novo e-mail de: mirellamelonegri@gmail.com\n",
      "üìå Assunto: estoque\n",
      "üìú Corpo do e-mail: se encontra em estoque o notebook thinkpad e14 da lenovo?\n",
      "\n",
      "üîç Procurando palavras: ['se', 'encontra', 'em', 'estoque', 'o', 'notebook', 'thinkpad', 'e14', 'da', 'lenovo?']\n",
      "üì¶ Resposta encontrada para 'estoque': Verifique a disponibilidade do produto no nosso site.\n",
      "üîç Resposta encontrada: Verifique a disponibilidade do produto no nosso site.\n",
      "‚úÖ E-mail enviado para mirellamelonegri@gmail.com\n",
      "‚úÖ Resposta enviada com sucesso!\n"
     ]
    }
   ],
   "source": [
    "import imaplib\n",
    "import smtplib\n",
    "import email\n",
    "from email.mime.text import MIMEText\n",
    "import sqlite3\n",
    "import string\n",
    "\n",
    "# Configura√ß√µes de e-mail\n",
    "IMAP_SERVER = \"imap.gmail.com\"\n",
    "SMTP_SERVER = \"smtp.gmail.com\"\n",
    "EMAIL_USER = \"emp.prototipoxyz@gmail.com\"\n",
    "EMAIL_PASS = \"ibxm orwi vhxt hdwt\"  # Lembre-se de usar uma senha de aplicativo se estiver usando Gmail com 2FA\n",
    "\n",
    "# Fun√ß√£o para remover pontua√ß√£o e normalizar o texto\n",
    "def limpar_texto(texto):\n",
    "    # Remover pontua√ß√£o\n",
    "    texto = texto.translate(str.maketrans(\"\", \"\", string.punctuation))\n",
    "    # Converter para min√∫sculas\n",
    "    return texto.lower()\n",
    "\n",
    "# Conectar-se ao servidor IMAP para ler e-mails\n",
    "def ler_emails():\n",
    "    mail = imaplib.IMAP4_SSL(IMAP_SERVER)\n",
    "    mail.login(EMAIL_USER, EMAIL_PASS)\n",
    "    mail.select(\"inbox\")\n",
    "\n",
    "    # Buscar e-mails n√£o lidos\n",
    "    _, mensagens = mail.search(None, \"UNSEEN\")\n",
    "    \n",
    "    # Contar o n√∫mero de e-mails n√£o lidos\n",
    "    num_emails = len(mensagens[0].split())\n",
    "    print(f\"E-mails n√£o lidos encontrados: {num_emails}\")  # Mostrar a quantidade de e-mails n√£o lidos\n",
    "\n",
    "    if num_emails > 0:\n",
    "        for num in mensagens[0].split():\n",
    "            _, data = mail.fetch(num, \"(RFC822)\")\n",
    "            raw_email = data[0][1]\n",
    "            msg = email.message_from_bytes(raw_email)\n",
    "            remetente = email.utils.parseaddr(msg[\"From\"])[1]\n",
    "            assunto = msg[\"Subject\"]\n",
    "            corpo = get_corpo_email(msg)\n",
    "\n",
    "            print(f\"\\nüìß Novo e-mail de: {remetente}\")\n",
    "            print(f\"üìå Assunto: {assunto}\")\n",
    "            print(f\"üìú Corpo do e-mail: {corpo}\")\n",
    "\n",
    "            # Buscar resposta no banco de dados\n",
    "            resposta = buscar_resposta(corpo)\n",
    "            print(f\"üîç Resposta encontrada: {resposta}\")\n",
    "\n",
    "            if resposta:\n",
    "                enviar_resposta(remetente, resposta)\n",
    "                print(\"‚úÖ Resposta enviada com sucesso!\")\n",
    "\n",
    "            # Marcar e-mail como lido\n",
    "            mail.store(num, \"+FLAGS\", \"\\\\Seen\")\n",
    "\n",
    "    mail.logout()\n",
    "\n",
    "# Extrair corpo do e-mail\n",
    "def get_corpo_email(msg):\n",
    "    if msg.is_multipart():\n",
    "        for part in msg.walk():\n",
    "            if part.get_content_type() == \"text/plain\":\n",
    "                return part.get_payload(decode=True).decode(\"utf-8\", errors=\"ignore\")\n",
    "    else:\n",
    "        return msg.get_payload(decode=True).decode(\"utf-8\", errors=\"ignore\")\n",
    "\n",
    "# Buscar resposta no banco de dados\n",
    "def buscar_resposta(mensagem):\n",
    "    conn = sqlite3.connect('respostas.db')\n",
    "    cursor = conn.cursor()\n",
    "\n",
    "    # Dividir a mensagem em palavras-chave para buscar respostas\n",
    "    palavras = mensagem.lower().split()\n",
    "    print(f\"üîç Procurando palavras: {palavras}\")  # Debug para ver as palavras\n",
    "\n",
    "    for palavra in palavras:\n",
    "        cursor.execute(\"SELECT resposta FROM respostas WHERE palavra_chave = ?\", (palavra,))\n",
    "        resultado = cursor.fetchone()\n",
    "        if resultado:\n",
    "            print(f\"üì¶ Resposta encontrada para '{palavra}': {resultado[0]}\")  # Debug\n",
    "            conn.close()\n",
    "            return resultado[0]\n",
    "\n",
    "    conn.close()\n",
    "    return \"Desculpe, n√£o encontrei uma resposta para sua pergunta. Entre em contato pelo nosso suporte.\"\n",
    "\n",
    "# Enviar resposta autom√°tica\n",
    "def enviar_resposta(destinatario, resposta):\n",
    "    msg = MIMEText(resposta)\n",
    "    msg[\"Subject\"] = \"Re: Sua Pergunta\"\n",
    "    msg[\"From\"] = EMAIL_USER\n",
    "    msg[\"To\"] = destinatario\n",
    "\n",
    "    try:\n",
    "        with smtplib.SMTP_SSL(SMTP_SERVER, 465) as server:\n",
    "            server.login(EMAIL_USER, EMAIL_PASS)\n",
    "            server.sendmail(EMAIL_USER, destinatario, msg.as_string())\n",
    "        print(f\"‚úÖ E-mail enviado para {destinatario}\")\n",
    "    except Exception as e:\n",
    "        print(f\"‚ùå Erro ao enviar e-mail: {e}\")\n",
    "\n",
    "# Executar script\n",
    "if __name__ == \"__main__\":\n",
    "    ler_emails()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
